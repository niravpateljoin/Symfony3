<?php

namespace DirectoryPlatform\AppBundle\Repository;

/**
 * NotificationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NotificationRepository extends \Doctrine\ORM\EntityRepository
{
	public function findByPublished($request)
    {
        $filterName = $request->get('Name');
        $filterListMsg = $request->get('Message');
        $filterListRead = $request->get('Read');
        $filterListArchive = $request->get('Archive');
        $filterListActive = $request->get('Active');
        
        $qb = $this->createQueryBuilder('notification');
        $qb->leftJoin('notification.user', 'user')
                    ->orderBy('notification.created', 'DESC');
        
        if($filterName != ''){    
            $qb->andWhere('user.username LIKE :filterName')
                 ->setParameter('filterName','%'.$filterName.'%');
        }
        if($filterListMsg != ''){    
            $qb->andWhere('notification.textToShow LIKE :filterListMsg')
                 ->setParameter('filterListMsg','%'.$filterListMsg.'%');
        }
        
        if($filterListRead != ''){  
            if($filterListRead == 0){
                $qb->andWhere('notification.isRead = :filterListRead OR notification.isRead is NULL ');
            }else{
                $qb->andWhere('notification.isRead = :filterListRead');
            }
            $qb->setParameter('filterListRead', $filterListRead);
        }

        if($filterListArchive != ''){

            if($filterListArchive == 0){
                $qb->andWhere('notification.isArchived = :isArchived OR notification.isArchived is NULL ');
            }else{
                $qb->andWhere('notification.isArchived = :isArchived');
            }
            $qb->setParameter('isArchived', $filterListArchive);
        }

        if($filterListActive != ''){
            if($filterListActive == 0){
                $qb->andWhere('notification.isActive = :isActive OR notification.isActive is NULL ');
            }else{
                $qb->andWhere('notification.isActive = :isActive');
            }
            $qb->setParameter('isActive', $filterListActive);
        }
        return  $qb->getQuery()
                  ->execute();
    }
}
